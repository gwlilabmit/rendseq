[
  {
    "objectID": "reference/thresh_peaks.html",
    "href": "reference/thresh_peaks.html",
    "title": "thresh_peaks",
    "section": "",
    "text": "make_peaks.thresh_peaks(z_scores, thresh=None, method='kink')\nFind peaks by calling z-scores above a threshold as a peak.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nz_scores\n\n(2xn array) of nt positions and zscores at that pos.\nrequired\n\n\nthresh\n\n(float) the threshold value to use. If none is provided it will be automatically calculated.\nNone\n\n\nmethod\n\n(str, options: [“kink”]) the method to use to automatically calculate the z score threshold if no thresh is provided. Default method is “kink”\n'kink'",
    "crumbs": [
      "Peak Calling",
      "`thresh_peaks`"
    ]
  },
  {
    "objectID": "reference/thresh_peaks.html#parameters",
    "href": "reference/thresh_peaks.html#parameters",
    "title": "thresh_peaks",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nz_scores\n\n(2xn array) of nt positions and zscores at that pos.\nrequired\n\n\nthresh\n\n(float) the threshold value to use. If none is provided it will be automatically calculated.\nNone\n\n\nmethod\n\n(str, options: [“kink”]) the method to use to automatically calculate the z score threshold if no thresh is provided. Default method is “kink”\n'kink'",
    "crumbs": [
      "Peak Calling",
      "`thresh_peaks`"
    ]
  },
  {
    "objectID": "reference/hmm_peaks.html",
    "href": "reference/hmm_peaks.html",
    "title": "hmm_peaks",
    "section": "",
    "text": "make_peaks.hmm_peaks(z_scores, i_to_p=1 / 1000, p_to_p=1 / 1.5, peak_center=10, spread=2)\nFit peaks to the provided z_scores data set using the vertibi algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nz_scores\n\n(2xn array) required: first column is position (ie bp location) second column is a modified z_score for that position.\nrequired\n\n\ni_to_p\n\n(float) value should be between zero and 1, represents probability of transitioning from inernal state to peak state. The default value is 1/2000, based on asseumption of geometrically distributed transcript lengths with mean length 1000. Should be a robust parameter.\n1 / 1000\n\n\np_to_p\n\n(float) The probability of a peak to peak transition. Default 1/1.5.\n1 / 1.5\n\n\npeak_center\n\n(float) the mean of the emission probability distribution for the peak state.\n10\n\n\nspread\n\n(float) the standard deviation of the peak emmission distribution.\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npeaks:\n(2xn array) with the first column being position and the second column being a peak assignment.",
    "crumbs": [
      "Peak Calling",
      "`hmm_peaks`"
    ]
  },
  {
    "objectID": "reference/hmm_peaks.html#parameters",
    "href": "reference/hmm_peaks.html#parameters",
    "title": "hmm_peaks",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nz_scores\n\n(2xn array) required: first column is position (ie bp location) second column is a modified z_score for that position.\nrequired\n\n\ni_to_p\n\n(float) value should be between zero and 1, represents probability of transitioning from inernal state to peak state. The default value is 1/2000, based on asseumption of geometrically distributed transcript lengths with mean length 1000. Should be a robust parameter.\n1 / 1000\n\n\np_to_p\n\n(float) The probability of a peak to peak transition. Default 1/1.5.\n1 / 1.5\n\n\npeak_center\n\n(float) the mean of the emission probability distribution for the peak state.\n10\n\n\nspread\n\n(float) the standard deviation of the peak emmission distribution.\n2",
    "crumbs": [
      "Peak Calling",
      "`hmm_peaks`"
    ]
  },
  {
    "objectID": "reference/hmm_peaks.html#returns",
    "href": "reference/hmm_peaks.html#returns",
    "title": "hmm_peaks",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npeaks:\n(2xn array) with the first column being position and the second column being a peak assignment.",
    "crumbs": [
      "Peak Calling",
      "`hmm_peaks`"
    ]
  },
  {
    "objectID": "reference/bowtie_to_peak.html",
    "href": "reference/bowtie_to_peak.html",
    "title": "bowtie_to_peak",
    "section": "",
    "text": "end_to_end.bowtie_to_peak(align_file, thresh=12, peak_file=None)\nConvert aligned file to peaks for 5r, 5f, 3r, and 3f.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalign_file\n\n(required) str path to the bowtie file.\nrequired\n\n\nthresh\n\nshould be used for thresholding z score values.\n12\n\n\npeak_file\n\n(optional, default = None), str path to a peaks file. If provided peaks will be used to remove shadows from the peaks.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr path to the location of the peaks file.",
    "crumbs": [
      "End-to-End pipelining",
      "`bowtie_to_peak`"
    ]
  },
  {
    "objectID": "reference/bowtie_to_peak.html#parameters",
    "href": "reference/bowtie_to_peak.html#parameters",
    "title": "bowtie_to_peak",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalign_file\n\n(required) str path to the bowtie file.\nrequired\n\n\nthresh\n\nshould be used for thresholding z score values.\n12\n\n\npeak_file\n\n(optional, default = None), str path to a peaks file. If provided peaks will be used to remove shadows from the peaks.\nNone",
    "crumbs": [
      "End-to-End pipelining",
      "`bowtie_to_peak`"
    ]
  },
  {
    "objectID": "reference/bowtie_to_peak.html#returns",
    "href": "reference/bowtie_to_peak.html#returns",
    "title": "bowtie_to_peak",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstr path to the location of the peaks file.",
    "crumbs": [
      "End-to-End pipelining",
      "`bowtie_to_peak`"
    ]
  },
  {
    "objectID": "algorithm.html",
    "href": "algorithm.html",
    "title": "rendseq Algorithm",
    "section": "",
    "text": "rendseq will assist in the normalization of files after they have been aligned to genomes.\n\nIt takes an input a .sam file from alignment of sequencing files to the genome of interest.\nThe first step in the rendseq analysis pipeline is to convert these aligned files into Rend-seq tracks. There are four Rend-seq tracks for every experiment, one for each the 5′ and 3′ mapping reads on both the forward and the reverse strands.\nWhile making these files, rendseq will handle the occasional issue which arises when non-templated additions are made to the 5′ end of reads during the library preparation process, and will remove the nucleotides which do not match at the 5′ end before generating the 5′ end Rend-seq tracks. Each of these Rend-seq tracks is saved in a wiggle, or .wig format.\n\nAfter the creation of the Rend-seq track files, each must be preprocessed before peak calling can proceed. This is because the density of reads mapping at any location can vary by several orders of magnitude, and the distribution of read density surrounding any particular read can also vary drastically. The step of pre-processing takes each Rend-seq track and converts it into a form where it is easier to make comparisons across disparate parts of the genome.\n\nThe first step of pre-processing is to pad the zero-values of the Rend-seq track. This padding is done using gaussian generated values, with a mean of 0 and a standard deviation of 1. It is important to pad with values with a non-zero standard deviation, rather than just setting the values to 0.\nAs the peak calling protocol ultimately uses surrounding distribution’s standard deviation to identify peaks if the standard deviation is artificially low it can lead to a high false positive rate of peaks.\nEven though true reads densities do not exist as floats, in practice treating these area of low read coverage as floats increased the performance of the peak-calling algorithm in areas with low read density.\n\nAfter padding, each genomic position is replaced by its normalized value, which I will refer to as a “score”, which is calculated via a function of the read density at that genomic position, and the surrounding read density."
  },
  {
    "objectID": "algorithm.html#preprocessing-rend-seq-files",
    "href": "algorithm.html#preprocessing-rend-seq-files",
    "title": "rendseq Algorithm",
    "section": "",
    "text": "rendseq will assist in the normalization of files after they have been aligned to genomes.\n\nIt takes an input a .sam file from alignment of sequencing files to the genome of interest.\nThe first step in the rendseq analysis pipeline is to convert these aligned files into Rend-seq tracks. There are four Rend-seq tracks for every experiment, one for each the 5′ and 3′ mapping reads on both the forward and the reverse strands.\nWhile making these files, rendseq will handle the occasional issue which arises when non-templated additions are made to the 5′ end of reads during the library preparation process, and will remove the nucleotides which do not match at the 5′ end before generating the 5′ end Rend-seq tracks. Each of these Rend-seq tracks is saved in a wiggle, or .wig format.\n\nAfter the creation of the Rend-seq track files, each must be preprocessed before peak calling can proceed. This is because the density of reads mapping at any location can vary by several orders of magnitude, and the distribution of read density surrounding any particular read can also vary drastically. The step of pre-processing takes each Rend-seq track and converts it into a form where it is easier to make comparisons across disparate parts of the genome.\n\nThe first step of pre-processing is to pad the zero-values of the Rend-seq track. This padding is done using gaussian generated values, with a mean of 0 and a standard deviation of 1. It is important to pad with values with a non-zero standard deviation, rather than just setting the values to 0.\nAs the peak calling protocol ultimately uses surrounding distribution’s standard deviation to identify peaks if the standard deviation is artificially low it can lead to a high false positive rate of peaks.\nEven though true reads densities do not exist as floats, in practice treating these area of low read coverage as floats increased the performance of the peak-calling algorithm in areas with low read density.\n\nAfter padding, each genomic position is replaced by its normalized value, which I will refer to as a “score”, which is calculated via a function of the read density at that genomic position, and the surrounding read density."
  },
  {
    "objectID": "algorithm.html#parameters",
    "href": "algorithm.html#parameters",
    "title": "rendseq Algorithm",
    "section": "Parameters",
    "text": "Parameters\nOnly scores above a certain threshold of 5 are kept, as in practice scores of less than 5 do not correspond to true peaks. The score-generating function is a modified Z-score which considers the Z-score of the position with respect to both the (optionally normalized) upstream and downstream read-density distributions. It has several parameters: gap size (an integer), window size (an integer), percent trim (a float in the range [0, 1]), and winsorize (a boolean). We will explain each of these here and the possible effects that each can have on score-generation.\n\nGap Size:\n\nThe gap size is the distance upstream and downstream of the given genomic position to exclude from any distribution calculations.\nThis exclusion is important as peaks can often be distributed across many read positions, meaning that they can artificially inflate the estimation of the local distribution’s standard deviation, and may deflate the score we assign to true peaks, potentially leading to a higher false negative rate.\nThe default of the program is to set this value to 5.\n\n\n\nWindow Size:\n\nThe window size refers to the total number of reads to include in the distribution.\nThis number ought to be large enough to provide a useful estimate of the mean and standard deviation, but not so large as to cause it to include other genes or features which would further distort the gaussian assumption of those distributions.\nIn the program it defaults to 50.\n\n\n\nPercent Trim\n\nPercent trim is a value which aids in the turning of the upstream and downstream distributions before the mean and standard deviation are called.\nIt will remove the top x % of reads, based on their read density.\nThe default is 0, though the user can supply a different percentage, which in certain cases may be useful in removing extremely high values, such as peaks. S\nSetting a value greater than ~10% is not recommended however, as there are cases where a high percentage of trimming will allow other features, such as noise, or the shadows which can accompany peaks, to appear as peaks as well.\n\n\n\nWinsorize\n\nWinsorize serves a similar purpose as percent trim - although it facilitates the removal of reads based on standard deviation.\nFor a given window - any read which exceeds a standard deviation of 1.5 will be dropped.\nWe use a low standard deviation here, as it is important to remember extreme outliers can lead to a very large standard deviation.\nWe have found that a threshold for winsorization of 1.5 strikes a good balance between aiding in the elimination of true outliers (other peaks) while not appearing to disrupt regions without any extreme outliers."
  },
  {
    "objectID": "01-Basic-Rendseq-Intro.html",
    "href": "01-Basic-Rendseq-Intro.html",
    "title": "Basic Rendseq Usage",
    "section": "",
    "text": "In this Notebook we run through a simple example of how to use rendseq for peak calling, demoing both HMM peak fitting and a simple thresholding approach, on some raw reads stored in wig format. These raw reads are included as part of our package and can be found in the Example Data folder. Note that we will make use of the library igv-jupyter for visualizations here - but this is not inlcuded as part of rendseq and will need to be seperately installed.\n\nStep 0 - Misc Installs\nFor all the rendseq related functionality - we will install it bit by bit below so it is easier to see what functionality comes from what part of the package. This section is just to import other useful libraries for this demo:\n\nimport igv_notebook\nigv_notebook.init()\n\nigv_browser= igv_notebook.Browser(\n    {\n        \"reference\":{\n            \"id\": \"NC_000964.3\",\n            \"name\": \"B. subtilus (NC_000964.3)\",\n            \"fastaURL\": \"https://storage.googleapis.com/rendseq_genomes/NC_000964.3.fasta\",\n            \"indexURL\": \"\",\n        },\n        \"locus\" : \"NC_000964.3:1,930,147-2,285,461\",\n        \"tracks\": [\n        {\n            \"name\": \"Genes\",\n            \"type\": \"annotation\",\n            \"format\": \"gff3\",\n            \"url\": \"https://storage.googleapis.com/rendseq_genomes/NC_000964.3_B_subtilis_168_genes.gff3\",\n        }]\n    }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 1 - Load data\nIn rendseq.file_funcs we have some functions for opening/creating relevant files. We will use that to extract our raw reads from the wig files in Example Data. Wig files are files with read count-density as a function of nucleotide density. These files are generated from Rend-seq data by recording the 5’-mapping and 3’-mapping read density into two files. In total this means a single Rend-seq experiment gives rise to 4 wig files: the 3’ and 5’ mapping reads for both the forward and reverse strands. The different direction strands and ends can be dealt with seperately - in this tutorial we will focus on the forward strand 5’-end mapping reads.\n\nfrom rendseq.file_funcs import open_wig\n\nexample_wig = '../Example_Data/example_wig_Jean_5f_subset.wig'\nreads, chrom = open_wig(example_wig)  # chrom information will be used when we save either our z-scores or peaks as wig files again and for the IGV browser:\n\n\n\nStep 2 - Transform the raw data\nOur peak finding algorithms require that the raw data is transformed using our modified z-score transformation first. (Visit our algorithm page to learn more about our modified z score). The function we use to do this is in rendseq.zscores.\n\nfrom rendseq.zscores import z_scores\n\nz_score_transformed_data = z_scores(reads)  # if desired z_score_transformed_data can be saved as a wig file and can be loaded and viewed in igv or a similar browser.\n\n\n\nStep 3 - Fit some peaks! (Part 1)\nNow that we have z_score transformed data, we can find our peaks. We will do this using two approaches - thresh - where all positions with a score above a threshold are called as peaks and hmm_peaks which will use a Hidden Markov Model to annotate our sequence with as peak/not peak. Lets start with the thresholded approach:\n\nfrom rendseq.make_peaks import thresh_peaks\n\nthresh_peaks_found = thresh_peaks(z_score_transformed_data, thresh = 12)\n\n\nfrom rendseq.make_peaks import hmm_peaks\n\nhmm_peaks_found = hmm_peaks(z_score_transformed_data)\n\nFinding Peaks\nCalculating Transition Matrix\nFound 132 Peaks"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Overview\n\nrendseq is a python package meant to facilitate analysis of end-enriched RNA sequencing data (Rend-Seq).\nTo learn more about Rend-Seq - eg what it is, what types of questions it can help you solve and how you can generate your own RendSeq data set please visit the Li lab website, or check out the Li Lab’s 2018 Cell Paper by Lalanne et al.\nWe have created an interactive website for viewing Rend-seq data from our lab: rendseq.org.\nTo learn more about the rendseq package read these docs! ;)\n\n\n\nInstallation\nOur package is available on pip. To get started - install our package via pip:\npip install rendseq\nOr to get the latest version download and install from our Github:\nClone via SSH (recommended):\ngit clone git@github.com:gwlilabmit/rendseq.git\nor by https:\ngit clone https://github.com/gwlilabmit/rendseq.git\nThen cd into the cloped repo and isntall via pip, either as a regular install:\npip install .\n\nOr if you plan to develop the package as an editable install:\npip install -e .\n\n\nContribute\nWe welcome collaborators on this project! To get started check out our instructions for how to get started as a contributor.\nYou can also direct all correspondence about this project to our dedicated mailing list: rendseq at mit dot edu"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rendseq",
    "section": "",
    "text": "Overview\n\nrendseq is a python package meant to facilitate analysis of end-enriched RNA sequencing data (Rend-Seq).\nTo learn more about Rend-Seq - eg what it is, what types of questions it can help you solve and how you can generate your own RendSeq data set please visit the Li lab website, or check out the Li Lab’s 2018 Cell Paper by Lalanne et al.\nTo learn more about the rendseq package read these docs! ;)\n\n\n\nInstallation\nOur package is available on pip. To get started - install our package via pip:\npip install rendseq\nOr to get the latest version download and install from our Github:\nClone via SSH (recommended):\ngit clone git@github.com:gwlilabmit/rendseq.git\nor by https:\ngit clone https://github.com/gwlilabmit/rendseq.git\nThen cd into the cloped repo and isntall via pip, either as a regular install:\npip install .\n\nOr if you plan to develop the package as an editable install:\npip install -e .\n\n\nContribute\nWe welcome collaborators on this project! To get started check out our instructions for how to get started as a contributor.\nYou can also direct all correspondence about this project to our dedicated mailing list: rendseq at mit dot edu or reach out to the Li lab."
  },
  {
    "objectID": "reference/bowtie_to_peak_remove_shadows.html",
    "href": "reference/bowtie_to_peak_remove_shadows.html",
    "title": "bowtie_to_peak_remove_shadows",
    "section": "",
    "text": "end_to_end.bowtie_to_peak_remove_shadows(bowtie_file, thresh=12)\nConvert bowtie aligned file to peaks after shadow removal.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nbowtie_file\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr path to the location of the peaks file (called\nafter shadow removal).",
    "crumbs": [
      "End-to-End pipelining",
      "`bowtie_to_peak_remove_shadows`"
    ]
  },
  {
    "objectID": "reference/bowtie_to_peak_remove_shadows.html#parameters",
    "href": "reference/bowtie_to_peak_remove_shadows.html#parameters",
    "title": "bowtie_to_peak_remove_shadows",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nbowtie_file\n\n\nrequired",
    "crumbs": [
      "End-to-End pipelining",
      "`bowtie_to_peak_remove_shadows`"
    ]
  },
  {
    "objectID": "reference/bowtie_to_peak_remove_shadows.html#returns",
    "href": "reference/bowtie_to_peak_remove_shadows.html#returns",
    "title": "bowtie_to_peak_remove_shadows",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstr path to the location of the peaks file (called\nafter shadow removal).",
    "crumbs": [
      "End-to-End pipelining",
      "`bowtie_to_peak_remove_shadows`"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Functions to go from alignment to peaks\n\n\n\nbowtie_to_peak\nConvert aligned file to peaks for 5r, 5f, 3r, and 3f.\n\n\nbowtie_to_peak_remove_shadows\nConvert bowtie aligned file to peaks after shadow removal.\n\n\n\n\n\n\nFunctions to call peaks from Rend-seq data.\n\n\n\nhmm_peaks\nFit peaks to the provided z_scores data set using the vertibi algorithm.\n\n\nthresh_peaks\nFind peaks by calling z-scores above a threshold as a peak."
  },
  {
    "objectID": "reference/index.html#end-to-end-pipelining",
    "href": "reference/index.html#end-to-end-pipelining",
    "title": "Function reference",
    "section": "",
    "text": "Functions to go from alignment to peaks\n\n\n\nbowtie_to_peak\nConvert aligned file to peaks for 5r, 5f, 3r, and 3f.\n\n\nbowtie_to_peak_remove_shadows\nConvert bowtie aligned file to peaks after shadow removal."
  },
  {
    "objectID": "reference/index.html#peak-calling",
    "href": "reference/index.html#peak-calling",
    "title": "Function reference",
    "section": "",
    "text": "Functions to call peaks from Rend-seq data.\n\n\n\nhmm_peaks\nFit peaks to the provided z_scores data set using the vertibi algorithm.\n\n\nthresh_peaks\nFind peaks by calling z-scores above a threshold as a peak."
  }
]